{
  "name": "AI Customer-Support Assistant · WhatsApp Ready · Works for Any Business",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.messages[0].text.body }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are [Company Name]’s real-time website assistant for https://www.your-company-url.com.\n\nAVAILABLE TOOLS\n• list_links(url) → { urls:[ … ] }  — returns up to 100 internal links from that page  \n• get_page(url)   → { text:\"…\" }    — returns the visible, tag-free text of the page (JavaScript rendered if needed)\n\nSEARCH STRATEGY\n1. Start with list_links on the root page.  \n2. Pick ≤ 5 links whose URL or anchor text best match the user’s question (producto, pago, envío, servicio, política, etc.).  \n3. For each chosen link call get_page once.  \n4. Read the returned text and look for the answer.  \n5. If the answer is still unknown, you may repeat steps 1-4 one level deeper.  \n6. Stop after two list_links rounds **or** eight get_page calls (whichever comes first).\n\nANSWER RULES\n• Reply in clear and friendly toon **as part of [Company Name]** (use “we”, “our”).  \n• Keep answers concise but complete.  \n• **No Markdown ni símbolos de formato. Nunca uses \\*, **, \\_, \\~, ni [texto](url).**  \n  Write urls like: Descriptive Text ␣URL   Ej.: Combos https://…  \n• Quote the exact wording for facts such as stock status, prices, envíos, métodos de pago, garantías o políticas.  \n• If the information is not on the site, reply exactly:  \n  “I can't find that information on our site right now. Do you want me to put you through to a human agent?”  \n• Stay on-domain; ignore mailto:, tel:, javascript:, or off-site links.\n• Finally, if any of the tools returns a status code 404, then reply:\n\"Non-subscribed user.\"",
          "maxIterations": 10,
          "returnIntermediateSteps": true
        }
      },
      "id": "80396764-707f-4c71-9271-bd287b8dd598",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "maxTries": 5,
      "position": [
        -520,
        672
      ],
      "retryOnFail": false,
      "typeVersion": 1.7,
      "alwaysOutputData": true,
      "waitBetweenTries": null
    },
    {
      "parameters": {
        "toolDescription": "Returns up to 100 unique, fully-qualified INTERNAL links for a given page.\n\nInput  (JSON body the model must supply)\n  {\n    \"url\": \"<absolute https://…>\"\n  }\n\nBehaviour\n  • Crawls only the domain of the input URL.\n  • Converts relative <a href> values to absolute URLs.\n  • Drops empty roots (\"/\"), mailto:, tel:, javascript:, and off-site links.\n  • De-duplicates the list.\n  • Responds with a JSON object:\n\n      {\n        \"urls\": [ \"<link-1>\", \"<link-2>\", … ]\n      }\n\nUse this tool when you need a navigation map of the current page.\nPass one of the returned URLs back into other tools (e.g. get_text) to read its content.\n",
        "method": "POST",
        "url": "https://lemolex.app.n8n.cloud/webhook/list-links",
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "url",
              "valueProvider": "fieldValue",
              "value": "https://www.your-company-url.com"
            },
            {
              "name": "auth-token",
              "valueProvider": "fieldValue",
              "value": "your-auth-token (read setup guide)"
            }
          ]
        }
      },
      "id": "0e1634a5-b9f3-46a7-8988-1c98fdc6713f",
      "name": "list_links",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        -256,
        896
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "660f21c9-815b-4ca0-83f1-90ed730f92cb",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -640,
        896
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "id": "53cb46f2-81b7-4d8f-8d98-90e2863bd1a0",
      "name": "WhatsApp Trigger",
      "type": "n8n-nodes-base.whatsAppTrigger",
      "position": [
        -864,
        672
      ],
      "webhookId": "857366e8-7b6f-45a7-bbd1-f876002620d7",
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// cleanAnswer – run once per item\nlet txt = $('AI Agent').first().json.output || '';\n\n// 1. Remove bold / italic / strike markers\ntxt = txt.replace(/[*_~]+/g, '');\n\n// 2. Convert [Texto](https://url) → Texto https://url\ntxt = txt.replace(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g, '$1 $2');\n\n// 3. Collapse 3+ blank lines\ntxt = txt.replace(/\\n{3,}/g, '\\n\\n').trim();\n\nreturn [{ json: { answer: txt } }];\n"
      },
      "id": "0ddc5864-5f88-42b1-ad4e-40525293e495",
      "name": "cleanAnswer",
      "type": "n8n-nodes-base.code",
      "position": [
        400,
        576
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "toolDescription": "Fetches the fully-rendered **plain text** of a single web.  \n• Input  : { \"url\": \"<absolute https://…>\" }  \n• Auth   : token is sent as HTTP basic-auth.  \n• Query  : url=<encoded url>  \n• Output : { \"text\": \"<visible text of the body>\", \"url\": \"<same url>\" }  \n• The \"text\" field already has **all HTML tags removed** .  \n• Use this tool whenever you need the actual words that appear on the page—product details, prices, stock lines, shipping terms, payment options, company policies, etc.  \n• Do **not** call it on off-site links or mailto:/tel:/javascript: pseudo-links.  \n",
        "method": "POST",
        "url": "https://lemolex.app.n8n.cloud/webhook/get_text",
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "url"
            },
            {
              "name": "auth-token",
              "valueProvider": "fieldValue",
              "value": "your-auth-token (read setup guide)"
            }
          ]
        }
      },
      "id": "1bf25444-22f5-4ac1-82b4-f972a152fd9d",
      "name": "get_page",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        -384,
        896
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// within24h?  – run once per item\n// Meta (WhatsApp) timestamp arrives as seconds since epoch\nconst lastTs = Number($('WhatsApp Trigger').first().json.messages[0].timestamp) * 1000;   // → ms\nconst withinWindow = Date.now() - lastTs < 24 * 60 * 60 * 1000;\n\nreturn [{ json: { withinWindow, answer: $json.answer, userId: $json.userId } }];"
      },
      "id": "6020cfd8-1233-44da-bcb8-ea5e20ef5cf5",
      "name": "24-hour window check",
      "type": "n8n-nodes-base.code",
      "position": [
        -48,
        672
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "d33e218e-a49a-49ed-9c6b-55b9ea0b0dbb",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.withinWindow }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "8194360a-4c7c-4fff-be76-9449c127eab3",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        176,
        672
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "phoneNumberId": "679436108574898",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.contacts[0].wa_id }}",
        "template": "hello_world|en_US"
      },
      "id": "7f034347-06cd-4f2c-9330-96c82998bd89",
      "name": "Send Pre-approved Template Message to Reopen the Conversation",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        400,
        768
      ],
      "typeVersion": 1,
      "webhookId": "4ac73bf2-8474-4ec2-a04b-ab3cb9eb5611"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "679436108574898",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.contacts[0].wa_id }}",
        "textBody": "={{ $json.answer }}",
        "additionalFields": {}
      },
      "id": "42e1b1ff-f7b0-4a31-b488-6dad5f02c70a",
      "name": "Send AI Agent's Answer",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        624,
        576
      ],
      "typeVersion": 1,
      "webhookId": "59089b35-07ca-4c08-8194-90ddb84ca4f1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.contacts[0].wa_id }}",
        "tableName": "message_history"
      },
      "id": "6cd7df02-879a-47b0-9945-2d01cb265e49",
      "name": "Postgres Users Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "position": [
        -512,
        896
      ],
      "typeVersion": 1.3
    }
  ],
  "pinData": {},
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "cleanAnswer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Pre-approved Template Message to Reopen the Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "24-hour window check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_page": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "list_links": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "cleanAnswer": {
      "main": [
        [
          {
            "node": "Send AI Agent's Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "24-hour window check": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Users Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b3314f4f-dae0-4c3a-baed-23bb01f11b45",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f0a870651035eb1f8709b6000471c8da9736f2076477041be6ca9e192779df2e"
  },
  "id": "W3v2MzCNcKAzKlnc",
  "tags": []
}